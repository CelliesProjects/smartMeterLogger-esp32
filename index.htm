<!doctype html>
<html lang="en">
<head>
<script>
const debugip="192.168.0.177";  //change this to the esp32 ip for remote running of this page
</script>
<meta charset="utf-8">
<meta name="viewport" content="minimal-ui,width=device-width,initial-scale=1.0,user-scalable=no" />
<link rel="icon" href="data:;base64,iVBORw0KGgo="><!--prevent favicon requests-->
<link href="https://fonts.googleapis.com/css?family=Roboto" rel="stylesheet">
<script src="https://code.jquery.com/jquery-3.4.1.js"></script>
<title>smartMeterReader-esp32</title>
<meta name="description" content="smartMeterReader-esp32">
<meta name="author" content="Cellie">
<script>!function(a,b){"function"==typeof define&&define.amd?define([],b):"undefined"!=typeof module&&module.exports?module.exports=b():a.ReconnectingWebSocket=b()}(this,function(){function a(b,c,d){function l(a,b){var c=document.createEvent("CustomEvent");return c.initCustomEvent(a,!1,!1,b),c}var e={debug:!1,automaticOpen:!0,reconnectInterval:1e3,maxReconnectInterval:3e4,reconnectDecay:1.5,timeoutInterval:2e3};d||(d={});for(var f in e)this[f]="undefined"!=typeof d[f]?d[f]:e[f];this.url=b,this.reconnectAttempts=0,this.readyState=WebSocket.CONNECTING,this.protocol=null;var h,g=this,i=!1,j=!1,k=document.createElement("div");k.addEventListener("open",function(a){g.onopen(a)}),k.addEventListener("close",function(a){g.onclose(a)}),k.addEventListener("connecting",function(a){g.onconnecting(a)}),k.addEventListener("message",function(a){g.onmessage(a)}),k.addEventListener("error",function(a){g.onerror(a)}),this.addEventListener=k.addEventListener.bind(k),this.removeEventListener=k.removeEventListener.bind(k),this.dispatchEvent=k.dispatchEvent.bind(k),this.open=function(b){h=new WebSocket(g.url,c||[]),b||k.dispatchEvent(l("connecting")),(g.debug||a.debugAll)&&console.debug("ReconnectingWebSocket","attempt-connect",g.url);var d=h,e=setTimeout(function(){(g.debug||a.debugAll)&&console.debug("ReconnectingWebSocket","connection-timeout",g.url),j=!0,d.close(),j=!1},g.timeoutInterval);h.onopen=function(){clearTimeout(e),(g.debug||a.debugAll)&&console.debug("ReconnectingWebSocket","onopen",g.url),g.protocol=h.protocol,g.readyState=WebSocket.OPEN,g.reconnectAttempts=0;var d=l("open");d.isReconnect=b,b=!1,k.dispatchEvent(d)},h.onclose=function(c){if(clearTimeout(e),h=null,i)g.readyState=WebSocket.CLOSED,k.dispatchEvent(l("close"));else{g.readyState=WebSocket.CONNECTING;var d=l("connecting");d.code=c.code,d.reason=c.reason,d.wasClean=c.wasClean,k.dispatchEvent(d),b||j||((g.debug||a.debugAll)&&console.debug("ReconnectingWebSocket","onclose",g.url),k.dispatchEvent(l("close")));var e=g.reconnectInterval*Math.pow(g.reconnectDecay,g.reconnectAttempts);setTimeout(function(){g.reconnectAttempts++,g.open(!0)},e>g.maxReconnectInterval?g.maxReconnectInterval:e)}},h.onmessage=function(b){(g.debug||a.debugAll)&&console.debug("ReconnectingWebSocket","onmessage",g.url,b.data);var c=l("message");c.data=b.data,k.dispatchEvent(c)},h.onerror=function(b){(g.debug||a.debugAll)&&console.debug("ReconnectingWebSocket","onerror",g.url,b),k.dispatchEvent(l("error"))}},1==this.automaticOpen&&this.open(!1),this.send=function(b){if(h)return(g.debug||a.debugAll)&&console.debug("ReconnectingWebSocket","send",g.url,b),h.send(b);throw"INVALID_STATE_ERR : Pausing to reconnect websocket"},this.close=function(a,b){"undefined"==typeof a&&(a=1e3),i=!0,h&&h.close(a,b)},this.refresh=function(){h&&h.close()}}return a.prototype.onopen=function(){},a.prototype.onclose=function(){},a.prototype.onconnecting=function(){},a.prototype.onmessage=function(){},a.prototype.onerror=function(){},a.debugAll=!1,a.CONNECTING=WebSocket.CONNECTING,a.OPEN=WebSocket.OPEN,a.CLOSING=WebSocket.CLOSING,a.CLOSED=WebSocket.CLOSED,a});</script>
<style>
*{box-sizing:border-box;}
html,body{
  position:absolute;
  top:0;
  bottom:0;
  left:0;
  right:0;
  margin:0;
  padding:0;
  background:black;
  color:#f1f1f1;
  text-align:center;
  font-family:'Roboto',sans-serif;
  overflow:hidden;
}
.noselect{
  -webkit-touch-callout:none; /* iOS Safari */
    -webkit-user-select:none; /* Safari */
     -khtml-user-select:none; /* Konqueror HTML */
       -moz-user-select:none; /* Firefox */
        -ms-user-select:none; /* Internet Explorer/Edge */
            user-select:none; /* Non-prefixed version,currently
                                  supported by Chrome and Opera */
}
#currentUse{
  font-size:80px;
}
#lowUsed,#highUsed,#gasUsed{
  font-size:20px;
}
.useVal{
  white-space:nowrap;
  margin:0 15px;
  display:inline-block;
}
</style>
</head>
<body class="noselect">
  <h2 id="header">huidig tarief:&nbsp;&nbsp;<span id="tariff">onbekend</span></h2>
  <div id="currentUse"></div>
  <div id="totals"><p id="lowUsed"></p><p id="highUsed"></p><p id="gasUsed"></p></div>
<script>
var url="http://";
if (window.location.hostname)url+=window.location.hostname;
else url+=debugip;
var ws_host="ws://";
if(window.location.hostname)ws_host+=window.location.hostname+"/current";
else ws_host+=debugip+"/current";
$(document).ready(function(){
  var ws=new ReconnectingWebSocket(ws_host,null,{debug:false,reconnectInterval:3000});
  ws.onmessage=function(e){
    var dsmr = e.data.split('\n');
    if(dsmr[0])$('#currentUse').html(dsmr[0]+"W");
    if(dsmr[1])$('#lowUsed').html('<span class="useVal">totaal laag: '+(dsmr[1]/1000.0).toFixed(3).replace(".", ",")+' kWh</span><span class="useVal">vandaag: '+(dsmr[4]/1000.0).toFixed(3).replace(".", ",")+' kWh</span>');
    if(dsmr[2])$('#highUsed').html('<span class="useVal">totaal hoog: '+(dsmr[2]/1000.0).toFixed(3).replace(".", ",")+' kWh</span><span class="useVal">vandaag: '+(dsmr[5]/1000.0).toFixed(3).replace(".", ",")+' kWh</span>');
    if(dsmr[3])$('#gasUsed').html('<span class="useVal">totaal gas: '+(dsmr[3]/1000.0).toFixed(3).replace(".", ",")+' m³</span><span class="useVal">vandaag: '+(dsmr[6]/1000.0).toFixed(3).replace(".", ",")+' m³</span>');
    if(dsmr[7])$('#tariff').html(dsmr[7]);
  };
  ws.onopen=function(event){console.log('[WebSocket] Connected');}
  ws.onclose=function(event){console.log('[WebSocket] Connection died, code='+event.code+' reason='+event.reason);}
  ws.onerror=function(error){console.log('[WebSocket] Error: '+error.message);}
})
</script>
</body>
</html>
