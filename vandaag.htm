<!doctype html>
<html lang="en">
<head>
<script>
const debugip="192.168.0.107";  //change this to the esp32 ip for remote running of this page
</script>
<meta charset="utf-8">
<meta name="viewport" content="minimal-ui,width=device-width,initial-scale=1.0,user-scalable=no" />
<link rel="icon" href="data:;base64,iVBORw0KGgo="><!--prevent favicon requests-->
<link rel="preload" href="https://fonts.googleapis.com/css?family=Roboto" as="font" crossorigin="anonymous"> <!-- force loading of font - see https://stackoverflow.com/questions/2756575/drawing-text-to-canvas-with-font-face-does-not-work-at-the-first-time/61809834#61809834  and https://developer.mozilla.org/en-US/docs/Web/HTML/Preloading_content -->
<title>smartMeterLogger vandaag</title>
<meta name="description" content="smartMeterLogger-esp32">
<meta name="author" content="Cellie">
<script>!function(a,b){"function"==typeof define&&define.amd?define([],b):"undefined"!=typeof module&&module.exports?module.exports=b():a.ReconnectingWebSocket=b()}(this,function(){function a(b,c,d){function l(a,b){var c=document.createEvent("CustomEvent");return c.initCustomEvent(a,!1,!1,b),c}var e={debug:!1,automaticOpen:!0,reconnectInterval:1e3,maxReconnectInterval:3e4,reconnectDecay:1.5,timeoutInterval:2e3};d||(d={});for(var f in e)this[f]="undefined"!=typeof d[f]?d[f]:e[f];this.url=b,this.reconnectAttempts=0,this.readyState=WebSocket.CONNECTING,this.protocol=null;var h,g=this,i=!1,j=!1,k=document.createElement("div");k.addEventListener("open",function(a){g.onopen(a)}),k.addEventListener("close",function(a){g.onclose(a)}),k.addEventListener("connecting",function(a){g.onconnecting(a)}),k.addEventListener("message",function(a){g.onmessage(a)}),k.addEventListener("error",function(a){g.onerror(a)}),this.addEventListener=k.addEventListener.bind(k),this.removeEventListener=k.removeEventListener.bind(k),this.dispatchEvent=k.dispatchEvent.bind(k),this.open=function(b){h=new WebSocket(g.url,c||[]),b||k.dispatchEvent(l("connecting")),(g.debug||a.debugAll)&&console.debug("ReconnectingWebSocket","attempt-connect",g.url);var d=h,e=setTimeout(function(){(g.debug||a.debugAll)&&console.debug("ReconnectingWebSocket","connection-timeout",g.url),j=!0,d.close(),j=!1},g.timeoutInterval);h.onopen=function(){clearTimeout(e),(g.debug||a.debugAll)&&console.debug("ReconnectingWebSocket","onopen",g.url),g.protocol=h.protocol,g.readyState=WebSocket.OPEN,g.reconnectAttempts=0;var d=l("open");d.isReconnect=b,b=!1,k.dispatchEvent(d)},h.onclose=function(c){if(clearTimeout(e),h=null,i)g.readyState=WebSocket.CLOSED,k.dispatchEvent(l("close"));else{g.readyState=WebSocket.CONNECTING;var d=l("connecting");d.code=c.code,d.reason=c.reason,d.wasClean=c.wasClean,k.dispatchEvent(d),b||j||((g.debug||a.debugAll)&&console.debug("ReconnectingWebSocket","onclose",g.url),k.dispatchEvent(l("close")));var e=g.reconnectInterval*Math.pow(g.reconnectDecay,g.reconnectAttempts);setTimeout(function(){g.reconnectAttempts++,g.open(!0)},e>g.maxReconnectInterval?g.maxReconnectInterval:e)}},h.onmessage=function(b){(g.debug||a.debugAll)&&console.debug("ReconnectingWebSocket","onmessage",g.url,b.data);var c=l("message");c.data=b.data,k.dispatchEvent(c)},h.onerror=function(b){(g.debug||a.debugAll)&&console.debug("ReconnectingWebSocket","onerror",g.url,b),k.dispatchEvent(l("error"))}},1==this.automaticOpen&&this.open(!1),this.send=function(b){if(h)return(g.debug||a.debugAll)&&console.debug("ReconnectingWebSocket","send",g.url,b),h.send(b);throw"INVALID_STATE_ERR : Pausing to reconnect websocket"},this.close=function(a,b){"undefined"==typeof a&&(a=1e3),i=!0,h&&h.close(a,b)},this.refresh=function(){h&&h.close()}}return a.prototype.onopen=function(){},a.prototype.onclose=function(){},a.prototype.onconnecting=function(){},a.prototype.onmessage=function(){},a.prototype.onerror=function(){},a.debugAll=!1,a.CONNECTING=WebSocket.CONNECTING,a.OPEN=WebSocket.OPEN,a.CLOSING=WebSocket.CLOSING,a.CLOSED=WebSocket.CLOSED,a});</script>
<style>
*{box-sizing:border-box;}
html,body{
  position:absolute;
  top:0;
  bottom:0;
  left:0;
  right:0;
  margin:0;
  padding:0;
  background:black;
  color:antiquewhite;
  text-align:center;
  font-family:'Roboto',sans-serif;
  overflow:hidden;
}
h2{
  margin:5px;
}
.noselect{
  -webkit-touch-callout:none; /* iOS Safari */
    -webkit-user-select:none; /* Safari */
     -khtml-user-select:none; /* Konqueror HTML */
       -moz-user-select:none; /* Firefox */
        -ms-user-select:none; /* Internet Explorer/Edge */
            user-select:none; /* Non-prefixed version,currently
                                  supported by Chrome and Opera */
}
#graphContainer{
  margin:5px auto;
  border:solid 1px antiquewhite;
  position:relative;
  overflow:hidden;
}
#dayGraph,#background{
  position:absolute;
  top:0;
  bottom:0;
  right:0;
  left:0;
}
#background{
  opacity:0.25;
}
#dayGraph{
  opacity:0.6;
}

#scale{
  display:flex;
  margin:auto;
}
#overview,#label{
  margin:5px;
}
.rangebutton{
  width:25%;
}
@media only screen and (max-width: 600px) {
  #scale,#graphContainer,#dayGraph,#background{
    display: none;
  }
}
@media only screen and (min-width: 600px) {
  #graphContainer,#dayGraph,#background{
    width: 600px;
    height:208px;
  }
  #scale{width: 600px;}
}
@media only screen and (min-width: 800px) {
  #graphContainer,#dayGraph,#background{
    width: 800px;
    height:277px;
  }
  #scale{width: 800px;}
}

@media only screen and (min-width: 1024px) {
  #graphContainer,#dayGraph,#background{
    width: 1024px;
    height:355px;
  }
  #scale{width: 1024px;}
}
@media only screen and (min-width: 1280px) {
  #graphContainer,#dayGraph,#background{
    width: 1280px;
    height:444px;
  }
  #scale{width: 1280px;}
}
@media only screen and (min-width: 1440px) {
  #graphContainer,#dayGraph,#background{
    width: 1440px;
    height:500px;
  }
  #scale{width: 1440px;}
}
</style>
</head>
<body class="noselect">
<h2 id="date">&nbsp;</h2>

<div id="graphContainer">
<canvas id="background" width="1440" height="500"></canvas>
<canvas id="dayGraph" width="1440" height="500"></canvas>
</div>

<div id="scale">
<input type="button" class="rangebutton" value="schaal 500W" onclick="setRange(500)">
<input type="button" class="rangebutton" value="schaal 1000W" onclick="setRange(1000)">
<input type="button" class="rangebutton" value="schaal 2000W" onclick="setRange(2000)">
<input type="button" class="rangebutton" value="schaal 4000W" onclick="setRange(4000)">
</div>

<div id="overview">&nbsp;</div>

<script>

var url="http://";
if (window.location.hostname)url+=window.location.hostname;
else url+=debugip;

var ws_host="ws://";
if(window.location.hostname)ws_host+=window.location.hostname+"/events";
else ws_host+=debugip+"/events";

const tm=new Date;
var dataUrl=url+"/"+tm.getFullYear()+"/"+(tm.getMonth()+1)+"/"+tm.getDate()+".log";

var maxrange=500; //in Watts

var lowestUse=10000000;
var hightime;
var highestUse=0;
var lowtime;

const serverpath="/events";
const serverResponse="electric_saved\n";

var savedData;

function ready(callbackFunction){
  if(document.readyState != 'loading')
    callbackFunction(event);
  else
    document.addEventListener("DOMContentLoaded", callbackFunction);
}

ready(event => {
  drawBackground();
  getData(dataUrl,drawGraph);
  var ws=new ReconnectingWebSocket(ws_host,null,{debug:false,reconnectInterval:3000});
  ws.onopen=function(event){console.log('[WebSocket] Connected');}
  ws.onclose=function(event){console.log('[WebSocket] Connection died, code='+event.code+' reason='+event.reason);}
  ws.onerror=function(error){console.log('[WebSocket] Error: '+error.message);}
  ws.onmessage=function(e){
    if(!e.data.startsWith(serverResponse))return;
    var item = e.data.substring(e.data.indexOf('\n'));
    savedData+=item;
    drawGraphItem(item);
    updateFooter();
  };
})

function drawGraphItem(item){
  const itemdata=item.split(' ');
  const tm=new Date(itemdata[0]*1000);
  if (parseInt(itemdata[1]) < lowestUse) {
    lowestUse = parseInt(itemdata[1]);
    lowtime = tm;
  }
  if (parseInt(itemdata[1]) > highestUse) {
    highestUse = parseInt(itemdata[1]);
    hightime = tm;
  }
  const secondstoday=tm.getSeconds()+tm.getMinutes()*60+tm.getHours()*3600;
  const xpos=map(secondstoday-30,0,86400,0,1440);
  const canvas = document.getElementById('dayGraph');
  const ctx = canvas.getContext('2d');
  ctx.beginPath();
  ctx.lineWidth = 1;
  ctx.strokeStyle='green';
  ctx.moveTo(xpos,canvas.height);
  const ypos=map(itemdata[1],0,maxrange,canvas.height,0);
  ctx.lineTo(xpos,ypos);
  ctx.stroke();
}

function getData(url,callBack) {
  var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
        savedData=this.responseText;
        callBack(this.responseText);
    }
  }
  xhttp.open("GET", url, true);
  xhttp.send();
  return;
}

function map(x,in_min,in_max,out_min,out_max){
  return(x-in_min)*(out_max-out_min)/(in_max-in_min)+out_min;
}

var reboots=0;

function updateFooter(){
  const options = {weekday: 'long', year: 'numeric', month: 'long', day: 'numeric',/* hour: '2-digit', minute: '2-digit', second: '2-digit',*/ hour12: false};
  var formattedDate = new Date(lowtime).toLocaleDateString('nl-NL', options);
  const date = document.getElementById('date');
  date.innerHTML = formattedDate;
  const overview = document.getElementById('overview');
  overview.innerHTML = reboots+" reboot(s) - laagst gemeten verbruik "+lowestUse+"W om "+lowtime.toLocaleTimeString()+" - hoogst gemeten verbruik "+highestUse+"W om "+hightime.toLocaleTimeString();
}

function drawBackground() {
  const canvas = document.getElementById('background');
  const ctx = canvas.getContext('2d');
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  ctx.font = "20px Roboto";
  ctx.setLineDash([5,5,5]);
  ctx.lineWidth = .7;
  ctx.strokeStyle='white';
  ctx.fillStyle = 'yellow';
  ctx.textAlign = 'center';
  ctx.textBaseline = 'middle';
  const step=canvas.height/10;
  for(vgrid=canvas.height;vgrid>=0;vgrid-=step){
    ctx.beginPath();
    ctx.moveTo(0,vgrid);
    ctx.lineTo(1440,vgrid);
    ctx.stroke();
    const wattage=map(vgrid,canvas.height,0,0,maxrange).toString()+"W";
    ctx.fillText(wattage, 100, vgrid);
    ctx.fillText(wattage, 1440-100, vgrid);
  }
  ctx.fillStyle = 'white'
  for(h=1;h<24;h++){
    const xpos=map(h,0,24,0,1440);
    ctx.beginPath();
    ctx.lineWidth = .7;
    ctx.moveTo(xpos,0);
    ctx.lineTo(xpos,canvas.height);
    ctx.stroke();
    ctx.fillText(h, xpos, 25);
    ctx.fillText(h, xpos, (canvas.height/2)-25);
    ctx.fillText(h, xpos, canvas.height-25);
  }
}

function drawGraph(rawdata){
  const canvas = document.getElementById('dayGraph');
  const ctx = canvas.getContext('2d');
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  ctx.lineWidth = 2;
  ctx.setLineDash([]);
  reboots=0;
  rawdata.split('\n').forEach(function(item){
    if (item.startsWith('#')) {
      const tm=new Date(item.substring(1)*1000);
      const reboottime=tm.getSeconds()+tm.getMinutes()*60+tm.getHours()*3600;
      const xpos=map(reboottime,0,86400,0,1440);
      ctx.beginPath();
      ctx.lineWidth = 2;
      ctx.strokeStyle="red";
      ctx.moveTo(xpos,0);
      ctx.lineTo(xpos,canvas.height);
      reboots++;
      ctx.stroke();
    } else {
      drawGraphItem(item);
    }
  });
  updateFooter();  
};

function setRange(range){
  maxrange=range;
  drawBackground();
  drawGraph(savedData);
  //TODO: set the clicked button to some color
}

</script>
</body>
</html>
