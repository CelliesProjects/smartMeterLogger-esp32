<!doctype html>
<html lang="en">
<head>
<script>
const debugip="192.168.0.109";  //change this to the esp32 ip for remote running of this page
</script>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width,initial-scale=1.0" />
<link rel="icon" href="data:;base64,iVBORw0KGgo="><!--prevent favicon requests-->
<link rel="preload" href="https://fonts.googleapis.com/css?family=Roboto" as="font" crossorigin="anonymous"> <!-- force loading of font - see https://stackoverflow.com/questions/2756575/drawing-text-to-canvas-with-font-face-does-not-work-at-the-first-time/61809834#61809834  and https://developer.mozilla.org/en-US/docs/Web/HTML/Preloading_content -->
<title>smartMeterLogger verleden</title>
<meta name="description" content="smartMeterLogger-esp32">
<meta name="author" content="Cellie">
<script>!function(a,b){"function"==typeof define&&define.amd?define([],b):"undefined"!=typeof module&&module.exports?module.exports=b():a.ReconnectingWebSocket=b()}(this,function(){function a(b,c,d){function l(a,b){var c=document.createEvent("CustomEvent");return c.initCustomEvent(a,!1,!1,b),c}var e={debug:!1,automaticOpen:!0,reconnectInterval:1e3,maxReconnectInterval:3e4,reconnectDecay:1.5,timeoutInterval:2e3};d||(d={});for(var f in e)this[f]="undefined"!=typeof d[f]?d[f]:e[f];this.url=b,this.reconnectAttempts=0,this.readyState=WebSocket.CONNECTING,this.protocol=null;var h,g=this,i=!1,j=!1,k=document.createElement("div");k.addEventListener("open",function(a){g.onopen(a)}),k.addEventListener("close",function(a){g.onclose(a)}),k.addEventListener("connecting",function(a){g.onconnecting(a)}),k.addEventListener("message",function(a){g.onmessage(a)}),k.addEventListener("error",function(a){g.onerror(a)}),this.addEventListener=k.addEventListener.bind(k),this.removeEventListener=k.removeEventListener.bind(k),this.dispatchEvent=k.dispatchEvent.bind(k),this.open=function(b){h=new WebSocket(g.url,c||[]),b||k.dispatchEvent(l("connecting")),(g.debug||a.debugAll)&&console.debug("ReconnectingWebSocket","attempt-connect",g.url);var d=h,e=setTimeout(function(){(g.debug||a.debugAll)&&console.debug("ReconnectingWebSocket","connection-timeout",g.url),j=!0,d.close(),j=!1},g.timeoutInterval);h.onopen=function(){clearTimeout(e),(g.debug||a.debugAll)&&console.debug("ReconnectingWebSocket","onopen",g.url),g.protocol=h.protocol,g.readyState=WebSocket.OPEN,g.reconnectAttempts=0;var d=l("open");d.isReconnect=b,b=!1,k.dispatchEvent(d)},h.onclose=function(c){if(clearTimeout(e),h=null,i)g.readyState=WebSocket.CLOSED,k.dispatchEvent(l("close"));else{g.readyState=WebSocket.CONNECTING;var d=l("connecting");d.code=c.code,d.reason=c.reason,d.wasClean=c.wasClean,k.dispatchEvent(d),b||j||((g.debug||a.debugAll)&&console.debug("ReconnectingWebSocket","onclose",g.url),k.dispatchEvent(l("close")));var e=g.reconnectInterval*Math.pow(g.reconnectDecay,g.reconnectAttempts);setTimeout(function(){g.reconnectAttempts++,g.open(!0)},e>g.maxReconnectInterval?g.maxReconnectInterval:e)}},h.onmessage=function(b){(g.debug||a.debugAll)&&console.debug("ReconnectingWebSocket","onmessage",g.url,b.data);var c=l("message");c.data=b.data,k.dispatchEvent(c)},h.onerror=function(b){(g.debug||a.debugAll)&&console.debug("ReconnectingWebSocket","onerror",g.url,b),k.dispatchEvent(l("error"))}},1==this.automaticOpen&&this.open(!1),this.send=function(b){if(h)return(g.debug||a.debugAll)&&console.debug("ReconnectingWebSocket","send",g.url,b),h.send(b);throw"INVALID_STATE_ERR : Pausing to reconnect websocket"},this.close=function(a,b){"undefined"==typeof a&&(a=1e3),i=!0,h&&h.close(a,b)},this.refresh=function(){h&&h.close()}}return a.prototype.onopen=function(){},a.prototype.onclose=function(){},a.prototype.onconnecting=function(){},a.prototype.onmessage=function(){},a.prototype.onerror=function(){},a.debugAll=!1,a.CONNECTING=WebSocket.CONNECTING,a.OPEN=WebSocket.OPEN,a.CLOSING=WebSocket.CLOSING,a.CLOSED=WebSocket.CLOSED,a});</script>
<style>
*{box-sizing:border-box;}
html,body{
  position:absolute;
  top:0;
  bottom:0;
  left:0;
  right:0;
  margin:0;
  padding:0;
  background:black;
  color:antiquewhite;
  text-align:center;
  font-family:'Roboto',sans-serif;
}
a{
  text-decoration:none;
  color: yellow;
}
h2{
  margin:5px;
}
.noselect{
  -webkit-touch-callout:none; /* iOS Safari */
    -webkit-user-select:none; /* Safari */
     -khtml-user-select:none; /* Konqueror HTML */
       -moz-user-select:none; /* Firefox */
        -ms-user-select:none; /* Internet Explorer/Edge */
            user-select:none; /* Non-prefixed version,currently
                                  supported by Chrome and Opera */
}
#graphContainer{
  margin:5px auto;
  border:solid 1px antiquewhite;
  position:relative;
  overflow:hidden;
  border-radius:5px;
}
#dayGraph, #compareGraph, #background{
  position:absolute;
  top:0;
  bottom:0;
  right:0;
  left:0;
}
#background{
  opacity:0.6;
}
#compareGraph{
  opacity:0.5;
}
#dayGraph{
  opacity:0.6;
}
#feedbackmsg{
  position: absolute;
  margin: auto;
  background: black;
  font-size: 22px;
  color: antiquewhite;
  top: 5px;
  left: 100px;
  right: 100px;
  top: 20px;
  padding: 10px;
  border: solid 1px white;
  border-radius: 5px;
  display: none;
}
#scale{
  display:flex;
  margin:auto;
}
.navbutton, .rangebutton{
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  text-transform: none;
  padding: 0px;
  margin: 0;
  cursor: pointer;
  text-align: center;
  position: relative;
  width:25%;
  font-size:20px;
  font-family:inherit;
  border:solid 1px grey;
  border-radius:5px;
  background:lightgrey;
  vertical-align:middle;
}
.navbutton:active, .rangebutton:active {
  transform: scale(0.95);
}
#nographics{
  line-height:200px;
  display:none;
  font-size:115px;
  white-space: nowrap;
}
#header{
  width:1440px;
  margin: auto;
  font-size: 22px;
  display:inline-flex;
  padding: 4px 0 0 0;
}
#date, #compare{
  margin:0 15px;
  display:inline-table;
  vertical-align:middle;
  white-space:nowrap;
  width:50%;
}
#date{
  color:lightgrey;
}
#date:hover{
  cursor:pointer;
}
@media only screen and (max-width: 600px) {
  #current, #scale, #graphContainer, #dayGraph,#compareGraph, #background{
    display: none;
  }
  #nographics{display: block;}
  #header, #current{display: none;}
}
@media only screen and (min-width: 600px) {
  #graphContainer, #dayGraph, #compareGraph, #background {
    width: 600px;
    height:208px;
  }
  #header, #scale{width: 600px;}
}
@media only screen and (max-width: 800px) {
  #compare{display:none;}
}
@media only screen and (min-width: 800px) {
  #graphContainer, #dayGraph, #compareGraph, #background{
    width: 800px;
    height:277px;
  }
  #header, #scale{width: 800px;}
}

@media only screen and (min-width: 1024px) {
  #graphContainer, #dayGraph, #compareGraph, #background{
    width: 1024px;
    height:355px;
  }
  #header, #scale{width: 1024px;}
}
@media only screen and (min-width: 1280px) {
  #graphContainer, #dayGraph, #compareGraph, #background{
    width: 1280px;
    height:444px;
  }
  #header, #scale{width: 1280px;}
}
@media only screen and (min-width: 1440px) {
  #graphContainer, #dayGraph, #compareGraph, #background{
    width: 1440px;
    height:500px;
  }
  #header, #scale{width: 1440px;}
}
.footer{
  margin:5px 10px;
  display:inline-table;
  white-space: nowrap;
}
#smallunit{
  font-size:35px;
  line-height:10px;
}
.navbutton{
  vertical-align:middle;
}
.nowrap{
  white-space: nowrap;
}
.comparechoice{
  color: lightgrey;
}
.comparechoice:hover{
  cursor: pointer;
}
</style>
</head>
<body class="noselect">
<div id="header">
  <p id="date">&nbsp;</p><p id="compare">vergelijk met <span class="comparechoice" id="today">vandaag</span> of <span class="comparechoice" id="datechoice">kies een datum</span></p>
</div>
<div id="graphContainer">
  <canvas id="background" width="1440" height="500"></canvas>
  <canvas id="compareGraph" width="1440" height="500"></canvas>
  <canvas id="dayGraph" width="1440" height="500"></canvas>
  <p id="feedbackmsg"></p>
</div>
<div id="scale">
  <button type="button" id="prevbutton" class="navbutton"><img src="/previous.svg"/></button>
  <input type="button" id="startRange" class="rangebutton" value="500 W" onmouseup="setRange(500)">
  <input type="button" class="rangebutton" value="1000 W" onmouseup="setRange(1000)">
  <input type="button" class="rangebutton" value="2000 W" onmouseup="setRange(2000)">
  <input type="button" class="rangebutton" value="4000 W" onmouseup="setRange(4000)">
  <button type="button" id="nextbutton" class="navbutton"><img src="/next.svg"/></button>
</div>
<div id="nographics"></div>
<div id="overview"></div>
<script>
var http_host = "http://";
if (window.location.hostname) http_host += window.location.hostname;
else http_host += debugip;

var ws_host = "ws://";
if(window.location.hostname) ws_host += window.location.hostname + "/events";
else ws_host += debugip + "/events";

var currentRange = 500; //in Watts
var lowestUse = 10000000;
var hightime;
var highestUse = 0;
var lowtime;
var savedData;
var savedCompareData;
var reboots;
var currentDay;
var compareDay;
var weAreComparing = false;
const compareColor = "yellow";

function datumUrl(time) {
  const datum = new Date(time);
  return http_host + "/" + datum.getFullYear() + "/" + (datum.getMonth() + 1) + "/" + datum.getDate() + ".log";
}

function ready(callbackFunction){
  if(document.readyState != 'loading')
    callbackFunction(event);
  else
    document.addEventListener("DOMContentLoaded", callbackFunction);
}

function getData(time, callBack, toCompareCanvas) {
  var xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    const date = new Date(time);
    if (this.readyState == 4) {
      switch (this.status) {
        case 200 :
          if (!toCompareCanvas) {
            savedData = this.responseText;
            currentDay = time;
          }
          else {
            savedCompareData = this.responseText;
            compareDay = time;
          }
          callBack(this.responseText, toCompareCanvas);
        break;
        case 404 : {
          const options = {weekday: 'long', year: 'numeric', month: 'long', day: 'numeric', hour12: false};
          document.getElementById('feedbackmsg').innerHTML = 'geen data aanwezig van <span class="nowrap">' + date.toLocaleDateString('nl-NL', options) + '</span>';
        }
        break;
        default : console.log("unhandled xhr status code " + this.status);
      }
    }
  }
  xhttp.open("GET", datumUrl(time), true);
  xhttp.send();
  return;
}

ready(event => {
  drawBackground();
  const oneday = 86400 * 1000;
  currentDay = new Date(Date.now() - oneday);    // since this is '/verleden', we start at yesterday;
  getData(currentDay, drawGraph);

  document.getElementById("startRange").focus();

  document.getElementById("prevbutton").addEventListener("mouseup", function() {
    const previousday = new Date(currentDay).getTime() - oneday;
    document.getElementById("feedbackmsg").innerHTML = 'data ophalen';
    document.getElementById("feedbackmsg").style.display = 'block';
    getData(previousday, drawGraph);
  });

  document.getElementById("nextbutton").addEventListener("mouseup", function() {
    const nextday = new Date(currentDay).getTime() + oneday;
    document.getElementById("feedbackmsg").innerHTML = 'data ophalen';
    document.getElementById("feedbackmsg").style.display = 'block';
    getData(nextday, drawGraph);
  });

  document.getElementById("feedbackmsg").addEventListener("mouseup", function() {
    this.style.display = 'none';
  });

  document.getElementById("today").addEventListener("mouseup", function() {
    weAreComparing = !weAreComparing;
    this.style.color = weAreComparing ? compareColor : "";

    if (weAreComparing) {
      const now = new Date();
      //      time           cbfun      drawonCompare
      getData(now.getTime(), drawGraph, weAreComparing);
      compareDay = now;
    }
    else {
      savedCompareData = '';
      const canvas = document.getElementById('compareGraph');
      const ctx = canvas.getContext('2d');
      ctx.clearRect(0, 0, canvas.width, canvas.height);
    }
  });

  document.getElementById("datechoice").addEventListener("mouseup", function() {
    alert("binnenkort!");
  });

  document.getElementById("date").addEventListener("mouseup", function() {
    alert("binnenkort!");
  });
})

function drawGraphItem(item, toCompareCanvas){
  const itemdata = item.split(' ');
  const tm = new Date(parseInt(itemdata[0]) * 1000);
  const currentUse = parseInt(itemdata[1]);
  if (currentUse < lowestUse) {
    lowestUse = currentUse;
    lowtime = tm;
  }
  else if (currentUse > highestUse) {
    highestUse = currentUse;
    hightime = tm;
  }
  const secondstoday = tm.getSeconds() + tm.getMinutes() * 60 + tm.getHours() * 3600;
  const xpos = map(secondstoday - 30, 0, 86400, 0, 1440);
  const canvas = document.getElementById(toCompareCanvas ? 'compareGraph' : 'dayGraph');
  const ctx = canvas.getContext('2d');
  ctx.beginPath();
  ctx.lineWidth = 1;
  ctx.strokeStyle = toCompareCanvas ? compareColor : 'white';
  ctx.moveTo(xpos, canvas.height);
  const ypos = map(currentUse, 0, currentRange, canvas.height, 0);
  ctx.lineTo(xpos, ypos);
  ctx.stroke();
}

// https://reactgo.com/format-date-time-javascript/
function updateDate(tm){
  const options = {weekday: 'long', year: 'numeric', month: 'long', day: 'numeric', hour12: false};
  document.getElementById('date').innerHTML = tm.toLocaleDateString('nl-NL', options);
}

function updateFooter(){
  const options = {hour: 'numeric', minute: '2-digit', hour12: false};
  var html = reboots ? '<span class="footer">' + reboots + ' reboot(s)</span>' : '';
  html += '<span class="footer">laagste verbruik: ' + lowestUse + ' W om ' + lowtime.toLocaleTimeString('nl-NL', options) + '</span>';
  html += '<span class="footer">hoogste verbruik: ' + highestUse + ' W om ' + hightime.toLocaleTimeString('nl-NL', options) + '</span>';
  document.getElementById('overview').innerHTML = html;
}

function map(x,in_min,in_max,out_min,out_max){
  return(x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

function drawBackground() {
  const canvas = document.getElementById('background');
  const ctx = canvas.getContext('2d');
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  ctx.font = "20px Roboto";
  ctx.setLineDash([5,5,5]);
  ctx.lineWidth = .7;
  ctx.strokeStyle='white';
  ctx.fillStyle = 'yellow';
  ctx.textAlign = 'center';
  ctx.textBaseline = 'middle';
  const step = canvas.height/10;
  for(vgrid = canvas.height - step; vgrid >= 0 + step; vgrid -= step){
    ctx.beginPath();
    ctx.moveTo(0, vgrid);
    ctx.lineTo(1440, vgrid);
    ctx.stroke();
    const wattage = map(vgrid, canvas.height, 0, 0, currentRange).toString();
    ctx.fillText(wattage, 60, vgrid);
    ctx.fillText(wattage, 1440 >> 1, vgrid);
    ctx.fillText(wattage, 1440 - 60, vgrid);
  }
  ctx.fillStyle = 'lightblue'
  ctx.strokeStyle = 'lightblue';
  for(h = 1;h < 24; h++){
    const xpos = map(h,0,24,0,1440);
    ctx.beginPath();
    ctx.lineWidth = .7;
    ctx.moveTo(xpos, 0);
    ctx.lineTo(xpos, canvas.height);
    ctx.stroke();
    ctx.fillText(h, xpos, 25);
    ctx.fillText(h, xpos, canvas.height - 25);
  }
}

function drawGraph(rawdata, toCompareCanvas){
  if (!rawdata) return;

  const canvas = document.getElementById(toCompareCanvas ? 'compareGraph' : 'dayGraph');
  const ctx = canvas.getContext('2d');
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  ctx.lineWidth = 2;
  ctx.setLineDash([]);
  //raw (file) data always starts with a '#' which if it is the first item in the first line of the file can be discarded - it is the lastreboottime
  if (rawdata.startsWith("#")) rawdata = rawdata.substring(rawdata.indexOf('\n') + 1);
  //extract the date
  if (!toCompareCanvas) {
    const date = parseInt(rawdata.substring(0,rawdata.indexOf(' ')));
    updateDate(new Date(date * 1000));
  }


  
  rawdata.split('\n').forEach(function(item){
    if (!toCompareCanvas && item.startsWith('#')) {
      const tm = new Date(parseInt(item.substring(1, item.indexOf(" "))) * 1000);
      const reboottime = tm.getSeconds() + tm.getMinutes() * 60 + tm.getHours() * 3600;
      const xpos = map(reboottime, 0, 86400, 0, 1440);
      ctx.beginPath();
      ctx.lineWidth = 2;
      ctx.strokeStyle = "red";
      ctx.moveTo(xpos, 0);
      ctx.lineTo(xpos, canvas.height);
      reboots++;
      ctx.stroke();
    } else
      drawGraphItem(item, toCompareCanvas);
  });
  if (!toCompareCanvas) updateFooter();

  lowestUse = 1000000;
  highestUse = 0;
  reboots = 0;

  document.getElementById("feedbackmsg").style.display = 'none';
};

function setRange(newrange){
  currentRange = newrange;
  drawBackground();
  drawGraph(savedData, false);
  drawGraph(savedCompareData, true);
}
</script>
</body>
</html>
